####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

import ipywidgets as widgets
from traitlets import Unicode, Dict
import json

from reactopya_gallery import InteractivePlotlyExample as InteractivePlotlyExampleOrig
from reactopya_gallery import Autocorrelograms as AutocorrelogramsOrig
from reactopya_gallery import NWBView as NWBViewOrig
from reactopya_gallery import PlotlyExample as PlotlyExampleOrig
from reactopya_gallery import ElectrodeGeometry as ElectrodeGeometryOrig
from reactopya_gallery import TimeseriesView as TimeseriesViewOrig

def _json_parse(x):
    try:
        return json.loads(x)
    except:
        return None

def _json_stringify(x):
    try:
        return json.dumps(x)
    except:
        return ''

@widgets.register
class InteractivePlotlyExample(widgets.DOMWidget):
    """Interactive plotly example"""
    _view_name = Unicode('InteractivePlotlyExampleView').tag(sync=True)
    _model_name = Unicode('InteractivePlotlyExampleModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    series = Unicode('').tag(sync=True)

    # javascript state
    noise_level = Unicode('').tag(sync=True)
    num_points = Unicode('').tag(sync=True)

    def __init__(self, **kwargs):
        super().__init__()
        self._X = InteractivePlotlyExampleOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['series']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['noise_level', 'num_points']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class Autocorrelograms(widgets.DOMWidget):
    """Autocorrelograms"""
    _view_name = Unicode('AutocorrelogramsView').tag(sync=True)
    _model_name = Unicode('AutocorrelogramsModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    output = Unicode('').tag(sync=True)
    status = Unicode('').tag(sync=True)
    status_message = Unicode('').tag(sync=True)

    # javascript state
    firingsPath = Unicode('').tag(sync=True)
    samplerate = Unicode('').tag(sync=True)
    download_from = Unicode('').tag(sync=True)
    max_samples = Unicode('').tag(sync=True)
    bin_size_msec = Unicode('').tag(sync=True)
    max_dt_msec = Unicode('').tag(sync=True)

    def __init__(self, **kwargs):
        super().__init__()
        self._X = AutocorrelogramsOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['output', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['firingsPath', 'samplerate', 'download_from', 'max_samples', 'bin_size_msec', 'max_dt_msec']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class NWBView(widgets.DOMWidget):
    """NWB view"""
    _view_name = Unicode('NWBViewView').tag(sync=True)
    _model_name = Unicode('NWBViewModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    object = Unicode('').tag(sync=True)
    status = Unicode('').tag(sync=True)
    status_message = Unicode('').tag(sync=True)

    # javascript state
    path = Unicode('').tag(sync=True)
    download_from = Unicode('').tag(sync=True)

    def __init__(self, **kwargs):
        super().__init__()
        self._X = NWBViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class PlotlyExample(widgets.DOMWidget):
    """Plotly example"""
    _view_name = Unicode('PlotlyExampleView').tag(sync=True)
    _model_name = Unicode('PlotlyExampleModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    series = Unicode('').tag(sync=True)

    # javascript state


    def __init__(self, **kwargs):
        super().__init__()
        self._X = PlotlyExampleOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['series']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in []:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class ElectrodeGeometry(widgets.DOMWidget):
    """Electrode geometry"""
    _view_name = Unicode('ElectrodeGeometryView').tag(sync=True)
    _model_name = Unicode('ElectrodeGeometryModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    locations = Unicode('').tag(sync=True)
    labels = Unicode('').tag(sync=True)
    status = Unicode('').tag(sync=True)
    status_message = Unicode('').tag(sync=True)

    # javascript state
    path = Unicode('').tag(sync=True)
    download_from = Unicode('').tag(sync=True)

    def __init__(self, **kwargs):
        super().__init__()
        self._X = ElectrodeGeometryOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['locations', 'labels', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class TimeseriesView(widgets.DOMWidget):
    """Timeseries view"""
    _view_name = Unicode('TimeseriesViewView').tag(sync=True)
    _model_name = Unicode('TimeseriesViewModel').tag(sync=True)
    _view_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _model_module = Unicode('reactopya_gallery_jupyter').tag(sync=True)
    _view_module_version = Unicode('^0.1.0').tag(sync=True)
    _model_module_version = Unicode('^0.1.0').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    status = Unicode('').tag(sync=True)
    statusMessage = Unicode('').tag(sync=True)
    numChannels = Unicode('').tag(sync=True)
    numTimepoints = Unicode('').tag(sync=True)
    samplerate = Unicode('').tag(sync=True)

    # javascript state
    recordingPath = Unicode('').tag(sync=True)
    download_from = Unicode('').tag(sync=True)
    segmentSize = Unicode('').tag(sync=True)
    segmentsRequested = Unicode('').tag(sync=True)

    def __init__(self, **kwargs):
        super().__init__()
        self._X = TimeseriesViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def _handle_python_state_changed(self):
        for key in ['status', 'statusMessage', 'numChannels', 'numTimepoints', 'samplerate']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['recordingPath', 'download_from', 'segmentSize', 'segmentsRequested']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)